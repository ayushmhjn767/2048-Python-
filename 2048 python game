import os
import sys
import random
import json
import pygame

# Initialize pygame
pygame.init()

# Screen dimensions and colors
WIDTH, HEIGHT = 400, 500
GRID_SIZE = 4
TILE_SIZE = WIDTH // GRID_SIZE
BACKGROUND_COLOR = (187, 173, 160)
TILE_COLORS = {
    0: (204, 192, 179), 2: (238, 228, 218), 4: (237, 224, 200),
    8: (242, 177, 121), 16: (245, 149, 99), 32: (246, 124, 95),
    64: (246, 94, 59), 128: (237, 207, 114), 256: (237, 204, 97),
    512: (237, 200, 80), 1024: (237, 197, 63), 2048: (237, 194, 46)
}
FONT = pygame.font.SysFont("arial", 40)
SCORE_FONT = pygame.font.SysFont("arial", 30)
UNDO_FONT = pygame.font.SysFont("arial", 20)

# Set up the display
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("2048")

# Undo feature
undo_stack = []

# Load leaderboard
leaderboard_file = "leaderboard.json"
if os.path.exists(leaderboard_file):
    with open(leaderboard_file, "r") as f:
        leaderboard = json.load(f)
else:
    leaderboard = []

# Game functions
def add_tile(grid):
    empty_tiles = [(i, j) for i in range(GRID_SIZE)
           for j in range(GRID_SIZE) if grid[i][j] == 0]
    if empty_tiles:
        i, j = random.choice(empty_tiles)
        grid[i][j] = 2 if random.random() < 0.9 else 4

def draw_grid(grid, score, undo_available):
    screen.fill(BACKGROUND_COLOR)
    for i in range(GRID_SIZE):
        for j in range(GRID_SIZE):
            tile_value = grid[i][j]
            tile_color = TILE_COLORS.get(tile_value, (60, 58, 50))
            pygame.draw.rect(screen, tile_color, 
                (j * TILE_SIZE, i * TILE_SIZE + 100, TILE_SIZE, TILE_SIZE))
            if tile_value != 0:
                text_surface = FONT.render(
                    str(tile_value), True, 
                    (119, 110, 101) if tile_value <= 4 else (249, 246, 242)
                )
                text_rect = text_surface.get_rect(
                    center=(j * TILE_SIZE + TILE_SIZE // 2,
                            i * TILE_SIZE + TILE_SIZE // 2 + 100)
                )
                screen.blit(text_surface, text_rect)

    # Display score
    score_text = SCORE_FONT.render(f"Score: {score}", True, (255, 255, 255))
    screen.blit(score_text, (10, 10))

    # Display undo option
    undo_text = UNDO_FONT.render(
        "Press Z to Undo" if undo_available else "Undo not available", 
        True, (255, 255, 255))
    screen.blit(undo_text, (10, 60))

    pygame.display.update()

def move_tiles(grid, direction):
    def slide(row):
        new_row = [i for i in row if i != 0]
        for i in range(len(new_row) - 1):
            if new_row[i] == new_row[i + 1]:
                new_row[i] *= 2
                new_row[i + 1] = 0
        return [i for i in new_row if i != 0] + [0] * (GRID_SIZE - len([i for i in new_row if i != 0]))

    if direction == "left":
        return [slide(row) for row in grid]
    elif direction == "right":
        return [slide(row[::-1])[::-1] for row in grid]
    elif direction == "up":
        return list(map(list, zip(*[slide(list(row)) for row in zip(*grid)])))
    elif direction == "down":
        return list(map(list, zip(*[slide(list(row[::-1]))[::-1] for row in zip(*grid)])))

def is_game_over(grid):
    for row in grid:
        for tile in row:
            if tile == 0:
                return False
    for i in range(GRID_SIZE):
        for j in range(GRID_SIZE):
            if (i < GRID_SIZE - 1 and grid[i][j] == grid[i + 1][j]) or (j < GRID_SIZE - 1 and grid[i][j] == grid[i][j + 1]):
                return False
    return True

def save_leaderboard(score):
    leaderboard.append(score)
    leaderboard.sort(reverse=True)
    leaderboard[:] = leaderboard[:5]
    with open(leaderboard_file, "w") as f:
        json.dump(leaderboard, f)

def display_leaderboard():
    screen.fill(BACKGROUND_COLOR)
    title = FONT.render("Leaderboard", True, (255, 255, 255))
    screen.blit(title, (WIDTH // 2 - title.get_width() // 2, 50))
    for i, score in enumerate(leaderboard):
        text = SCORE_FONT.render(f"{i + 1}. {score}", True, (255, 255, 255))
        screen.blit(text, (WIDTH // 2 - text.get_width() // 2, 150 + i * 50))
    pygame.display.update()
    pygame.time.wait(3000)

gameOn=True
while gameOn:
    grid = [[0] * GRID_SIZE for _ in range(GRID_SIZE)]
    add_tile(grid)
    add_tile(grid)
    score = 0
    undo_available = False
    running = True

    while running:
        draw_grid(grid, score, undo_available)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                save_leaderboard(score)
                display_leaderboard()
                pygame.quit()
                sys.exit()

            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    new_grid = move_tiles(grid, "left")
                elif event.key == pygame.K_RIGHT:
                    new_grid = move_tiles(grid, "right")
                elif event.key == pygame.K_UP:
                    new_grid = move_tiles(grid, "up")
                elif event.key == pygame.K_DOWN:
                    new_grid = move_tiles(grid, "down")
                elif event.key == pygame.K_z and undo_stack:
                    grid, score = undo_stack.pop()
                    undo_available = bool(undo_stack)
                    draw_grid(grid, score, undo_available)
                    continue
                else:
                    continue

                if new_grid != grid:
                    undo_stack.append((grid, score))
                    if len(undo_stack) > 10:  # Limit undo stack size
                        undo_stack.pop(0)
                    grid = new_grid
                    if grid is not None:  # Check if new_grid is not None
                     add_tile(grid)
                     score = sum(sum(row) for row in grid)
                     undo_available = True

                if is_game_over(grid):
                    save_leaderboard(score)
                    display_leaderboard()
                    running = False

    pygame.quit()
    sys.exit()
